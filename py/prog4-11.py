# -*- coding: utf-8 -*-
"""prog4-11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7a2EAx8islYdghIsr0HrJKxAxWsKF46
"""

from google.colab import files
files.upload() # kaggle.jsonをアップロード
!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
# PCAとカーネルPCAを使用するためにインポート
from sklearn.decomposition import PCA, KernelPCA
from sklearn.preprocessing import MinMaxScaler
# 可視化用にインポート
import matplotlib.pyplot as plt
# %matplotlib inline

# データの準備
def prepare():
    !kaggle datasets download -d primaryobjects/voicegender
    !unzip voicegender.zip
    df = pd.read_csv('voice.csv')
    df = df.sample(frac=1, random_state=0)
    vec = df.drop('label', axis=1).values
    # 正規化を行う
    ms = MinMaxScaler()
    vec = ms.fit_transform(vec)
    lbs = \
         df.loc[:,['label']].replace(\
         {'male':0, 'female':1}).values
    return vec, lbs

# カーネルPCA, PCAによる次元削減と可視化
def graph_Embedding(emb, features, lbs, fname):
    print('\n--{}--'.format(emb.__class__.__name__))
    df = pd.DataFrame(features, \
               columns=list(range(len(features[0]))))
    fspace = emb.fit_transform(df)
    fspace = fspace[:500]
    ndf = pd.DataFrame(fspace, columns=['1', '2'])
    print(ndf.head())
    n = 0
    labels = [0, 1]
    col = ['red', 'green']
    mks = ['o', '^']
    chk = [0] * 2
    fig = plt.figure()
    ax = fig.add_subplot(111)
    for i, (dim1,dim2,l) in enumerate(zip( \
        fspace[:,0], fspace[:,1], lbs[:,0])):
        if chk[l] == 0:
            print(dim1, dim2)
            ax.plot(dim1,dim2, alpha=0.5, c=col[l], \
            linestyle='None', marker=mks[l], label=labels[l])
        else:
            ax.plot(dim1,dim2,alpha=0.5, \
                     linestyle='None', c=col[l], \
                     marker=mks[l])
        chk[l] += 1
        n += 1
        if n % 10 == 0:
            ax.annotate(labels[l], xy=(dim1,dim2))
    ax.grid()
    ax.set_xlabel('DIM-1')
    ax.set_ylabel('DIM-2')
    ax.legend()
    ax.set_title('2D plot by {}'.format(fname))
    plt.savefig('voice2Dplot-{}.png'.format(fname),dpi=400)
    plt.show()

def main():
    features, lbs = prepare()
    types = ['KernelPCA-rbf', 
             'KernelPCA-poly', 'NormalPCA']
    for i, emb in enumerate([KernelPCA(n_components=2, \
                kernel='rbf', gamma=0.5, random_state=0), 
                KernelPCA(n_components=2, \
                kernel='poly', gamma=0.03, random_state=0), 
                PCA(n_components=2, random_state=0)]):
        graph_Embedding(emb, features, lbs, types[i])

if __name__ == '__main__':
    main()