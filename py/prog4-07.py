# -*- coding: utf-8 -*-
"""prog4-07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hS6HSb_G-qotL4wAtEz6Zx6xaZmnA1yV
"""

from google.colab import files
files.upload() # kaggle.jsonをアップロード
!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
# 主成分分析(PCA)を使用するためインポート
from sklearn.decomposition import PCA
# 非負値行列因子分解(NMF)を使用するためインポート
from sklearn.decomposition import NMF
# 正規化のためにインポート
from sklearn.preprocessing import MinMaxScaler
# 可視化用にインポート
import matplotlib.pyplot as plt
# %matplotlib inline

# データの準備
!kaggle datasets download -d debasisdotcom/parkinson-disease-detection
!unzip parkinson-disease-detection.zip
df = pd.read_csv('Parkinsson disease.csv')
print(df)
# 数値でない'name'の列を削除
df.drop('name', axis=1, inplace=True)
X1 = df[ df['status'] == 0 ].values
X2 = df[ df['status'] == 1 ].values

# PCAの実行(次元数をn_componentsで指定）
pca = PCA(n_components=2, random_state=1)
X = pca.fit(df.values)
X1 = pca.transform(X1)
X2 = pca.transform(X2)
# 可視化
plt.scatter(X1[:,0], X1[:,1], c='red', marker='^', alpha=0.5)
plt.scatter(X2[:,0], X2[:,1], c='blue', marker='*', alpha=0.5)
plt.legend(('Healthy', 'Parkinson' ), loc=3)
plt.savefig('PCA_disease.png', dpi=500)
plt.show()

# NMFの実行(次元数をn_componentsで指定）
# 非負値を含まないように正規化してから実行
X = df.values
X1 = df[ df['status'] == 0 ].values
X2 = df[ df['status'] == 1 ].values
ms = MinMaxScaler()
ms.fit(X)
X1 = ms.transform(X1)
X2 = ms.transform(X2)
nmf = NMF(n_components=2, max_iter=300, random_state=1)
# 行列H1,H2は次元削減後の特徴量行列
# 行列W1,W2はデータを線形近似するための基底行列
nmf.fit(X1)
H1 = nmf.transform(X1)
W1 = nmf.n_components_
nmf.fit(X2)
H2 = nmf.transform(X2)
W2 = nmf.n_components_

# 可視化
plt.scatter(H1[:,0], H1[:,1], c='red', marker='^', alpha=0.5)
plt.scatter(H2[:,0], H2[:,1], c='blue', marker='*', alpha=0.5)
plt.legend(('Healthy', 'Parkinson' ), loc=3)
plt.savefig('NMF_disease.png', dpi=500)
plt.show()